"use strict";
// src/cli.ts
// Copyright 2018-2020 Leo C. Singleton IV <leo@leosingleton.com>
// Entry point when running "npx webpack-glsl-minify ..." on the command line
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fsAsync = require("./fsAsync");
const minify_1 = require("./minify");
const node_1 = require("./node");
const glob = require("glob");
const path = require("path");
const yargs = require("yargs");
const outputFormats = ['object', 'source', 'sourceOnly'];
// Validate and parse command line arguments. yargs exits and displays help on invalid arguments.
const argv = yargs
    .command('$0 <files..> [options]', 'Minifies one or more GLSL files. Input files may be specified in glob syntax.')
    .demandCommand()
    .options({
    ext: {
        alias: 'e',
        default: '.js',
        describe: 'Extension for output files',
        type: 'string'
    },
    outDir: {
        alias: 'o',
        describe: 'Output base directory. By default, files are output to the same directory as the input .glsl file.',
        type: 'string'
    },
    output: {
        choices: outputFormats,
        describe: 'Output format',
        default: 'object'
    },
    esModule: {
        describe: 'Uses ES modules syntax. Applies to the "object" and "source" output formats.',
        type: 'boolean'
    },
    stripVersion: {
        describe: 'Strips any #version directives',
        type: 'boolean'
    },
    preserveDefines: {
        describe: 'Disables name mangling of #defines',
        type: 'boolean'
    },
    preserveUniforms: {
        describe: 'Disables name mangling of uniforms',
        type: 'boolean'
    },
    preserveVariables: {
        describe: 'Disables name mangling of variables',
        type: 'boolean'
    },
    preserveAll: {
        describe: 'Disables all mangling',
        type: 'boolean'
    },
    nomangle: {
        describe: 'Disables name mangling for a set of keywords',
        type: 'array'
    }
})
    .help()
    .argv;
// Create minifier
const glsl = new minify_1.GlslMinify({
    output: argv.output,
    esModule: argv.esModule,
    stripVersion: argv.stripVersion,
    preserveDefines: argv.preserveDefines,
    preserveUniforms: argv.preserveUniforms,
    preserveVariables: argv.preserveVariables,
    nomangle: argv.nomangle
}, node_1.nodeReadFile, node_1.nodeDirname);
// Process input files
if (Array.isArray(argv.files)) {
    for (const pattern of argv.files) {
        processGlob(pattern);
    }
}
else {
    processGlob(argv.files);
}
function processGlob(pattern) {
    glob(pattern, (err, matches) => {
        if (err) {
            console.log(err);
            process.exit(-1);
        }
        for (const file of matches) {
            processFile(file).then(() => { }, err => {
                console.log(err);
                process.exit(-1);
            });
        }
    });
}
function processFile(file) {
    return __awaiter(this, void 0, void 0, function* () {
        // Determine the output file path
        const filename = path.basename(file);
        const outfile = path.resolve(argv.outDir || '', path.dirname(file), filename + argv.ext);
        console.log(`${file} => ${outfile}`);
        // Read the input file and minify it
        const rawGlsl = yield node_1.nodeReadFile(file);
        const minifiedGlsl = yield glsl.executeFileAndStringify(rawGlsl);
        // Write output file, ensuring output directory exists first
        yield fsAsync.mkdirp(outfile);
        yield fsAsync.writeFile(outfile, minifiedGlsl);
    });
}
//# sourceMappingURL=cli.js.map