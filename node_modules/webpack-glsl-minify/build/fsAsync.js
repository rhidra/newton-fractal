"use strict";
// src/fsAsync.ts
// Copyright 2018-2020 Leo C. Singleton IV <leo@leosingleton.com>
// Wrappers around Node's filesystem functions to make them use async patterns
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.exec = exports.mkdirp = exports.mkdir = exports.writeFile = exports.readFile = exports.exists = void 0;
const cp = require("child_process");
const fs = require("fs");
const path = require("path");
function exists(p) {
    return new Promise(resolve => {
        fs.exists(p, exists => {
            resolve(exists);
        });
    });
}
exports.exists = exists;
function readFile(p, options) {
    return new Promise((resolve, reject) => {
        fs.readFile(p, options, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
}
exports.readFile = readFile;
function writeFile(p, data) {
    return new Promise((resolve, reject) => {
        fs.writeFile(p, data, err => {
            if (err) {
                reject(err);
            }
            resolve();
        });
    });
}
exports.writeFile = writeFile;
function mkdir(p) {
    return new Promise((resolve, reject) => {
        fs.mkdir(p, err => {
            if (err) {
                reject(err);
            }
            resolve();
        });
    });
}
exports.mkdir = mkdir;
function mkdirp(p) {
    return __awaiter(this, void 0, void 0, function* () {
        const dirname = path.dirname(p);
        if (yield exists(dirname)) {
            return;
        }
        yield mkdirp(dirname);
        yield mkdir(dirname);
    });
}
exports.mkdirp = mkdirp;
function exec(command, cwd) {
    return new Promise((resolve, reject) => {
        cp.exec(command, { cwd }, (err, stdout, stderr) => {
            if (err) {
                reject(`${err}\n${stdout}\n${stderr}`);
            }
            resolve();
        });
    });
}
exports.exec = exec;
//# sourceMappingURL=fsAsync.js.map