"use strict";
// src/webpack.ts
// Copyright 2018-2020 Leo C. Singleton IV <leo@leosingleton.com>
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.webpackLoader = exports.webpackReadFile = void 0;
const minify_1 = require("./minify");
const loader_utils_1 = require("loader-utils");
const fs_1 = require("fs");
const node_1 = require("./node");
/** Implementation of readFile for Webpack loaders */
function webpackReadFile(loader, filename, directory) {
    return new Promise((resolve, reject) => {
        // If no directory was provided, use the root GLSL file being included
        directory = directory || loader.context;
        // Resolve the file path
        loader.resolve(directory, filename, (err, path) => {
            if (err) {
                return reject(err);
            }
            loader.addDependency(path);
            fs_1.readFile(path, 'utf-8', (err, data) => {
                if (!err) {
                    // Success
                    resolve({ path, contents: data });
                }
                else {
                    reject(err);
                }
            });
        });
    });
}
exports.webpackReadFile = webpackReadFile;
function webpackLoader(content) {
    return __awaiter(this, void 0, void 0, function* () {
        const loader = this;
        const callback = loader.async();
        const options = loader_utils_1.getOptions(loader);
        try {
            const glsl = new minify_1.GlslMinify(options, (filename, directory) => webpackReadFile(loader, filename, directory), node_1.nodeDirname);
            const code = yield glsl.executeAndStringify(content);
            callback(null, code);
        }
        catch (err) {
            callback(err);
        }
    });
}
exports.webpackLoader = webpackLoader;
//# sourceMappingURL=webpack.js.map